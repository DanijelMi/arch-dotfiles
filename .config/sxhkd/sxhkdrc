### OPEN PROGRAM ###
# Open rofi (combi mode)
super + r
 rofi -show combi

# Open rofi (SSH mode)
#super + shift + s
# rofi -show ssh

# Open web browser
super + {_,shift} + q
 {xdg-open http://, firefox --private-window}

# Open VIM/IDE
super + {a, shift a}
 {$IDE_GUI, $TERMINAL -e vim}

# Open scrcpy
super alt p
  scrcpy -b 99000000 -m 900

# Open bluetooth manager
super + w ; b
 blueman-manager >/dev/null &

# Open pulseaudio control
super + w ; v
 pavucontrol >/dev/null &

# Start VNC virtual screen

# Open file browser(TUI/GUI)
super + {e, shift e}
 {$TERMINAL -e $FILE,\
 $FILE_GUI}

# Open storage use analyzer
super + ctrl + e
 filelight &

# Open text editor(TUI/GUI)
#super + {t, shift t}
# {$TERMINAL -e $EDITOR,\
# $EDITOR_GUI}

# Open pinger
super p
 $TERMINAL -e sh -c "advanced-ping.sh"

# TTS clipboard content
super + alt + v
 festival --tts <(xclip -o)

# Toggle compositor
super + ctrl + p
 pgrep -u $USER picom > /dev/null 2>&1 && pkill picom || picom --experimental-backends& 

# Open clipboard content in mpv
super + y
 mpv-fifo.sh &

# Focus the special-purpose youtube player
super + shift + y
 xdotool windowactivate $(xdotool search --name "main_player")
 
# Screen locker
{ctrl + alt + l, XF86ScreenSaver}
 pactl set-sink-mute @DEFAULT_SINK@ 1 ;\
 $LOCKSCREEN& ;\
 sleep 3 && xdg-screensaver activate

# Screen locker
{super + ctrl + alt + l, super + XF86ScreenSaver}
 pactl set-sink-mute @DEFAULT_SINK@ 1 ;\
 lock-glitch& ;\
 sleep 3 && xdg-screensaver activate
 
# Keyboard layout
super + alt + space
 rofi-keyboard

# Pick emoji to clipboard
super + ctrl + space
 rofi-emoji.sh

# Open terminal
super + Return
 $TERMINAL&

# Open transparent alacritty terminal
super + shift + Return
 alacritty_transparent&

# Open list of sxhkd keybinds
super + alt + m
 rofi-sxhkd

# Open Screenshot tool
super + Print
 pgrep flameshot >/dev/null || flameshot & ; flameshot gui &

# Open Screenshot tool
super + shift + Print
 screen_record.sh &

# Open custom script menu
super + z 
 rofi-select

# Restart keybind daemon
ctrl + alt + k
 pkill -SIGUSR1 sxhkd

# Open communication apps
super w ; {w,l,n}
 {firefox --new-window https://web.whatsapp.com,\
 firefox --new-window https://www.linkedin.com,\
 $TERMINAL -e newsboat}

# Run dirty-scripts for rapid testing
super + F{1,2,3,4,5}
 dirty_binds {1,2,3,4,5}
super + shift F{1,2,3,4,5}
 dirty_binds {1,2,3,4,5} t
super F6
 $TERMINAL -e $EDITOR $(which dirty_actions)

# Open other apps
super + w ; {k,r,g,m,c}
 {keepassxc,\
 firefox --new-window https://www.reddit.com,\
 firefox --new-window https://github.com,\
 pgrep mpd >/dev/null && $TERMINAL -e ncmpcpp || (mpd && $TERMINAL -e ncmpcpp),\
 speedcrunch}

# Open Gmail
alt + m ; {1,2,3}
 firefox --new-window https://mail.google.com/mail/u/{0,1,2}

# Volume
XF86Audio{RaiseVolume,LowerVolume}
 pactl set-sink-volume @DEFAULT_SINK@ {+10%,-10%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"

XF86AudioMute
 pactl set-sink-mute @DEFAULT_SINK@ toggle ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"
# Scroll Volume
super {button4,button5}
 pactl set-sink-volume @DEFAULT_SINK@ {+3%,-3%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"
super + button{6,7}
 pactl set-sink-volume @DEFAULT_SINK@ {-1%,+1%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"

# Playback
XF86Audio{Next,Prev,Play,Stop}
 mpc {next,prev,toggle,stop}

# Brightness
{XF86MonBrightnessDown, XF86MonBrightnessUp}
 xbacklight -{dec,inc} 20 -time 150 ; \
 dunstify -r "71123" -a Brightness -u low -t 700 "Brightness: $(xbacklight -get | cut -d. -f1)" 
super + alt + button{6,7}
 xbacklight -{dec,inc} 6 -time 50 ; \
 dunstify -r "71123" -a Brightness -u low -t 700 "Brightness: $(xbacklight -get | cut -d. -f1)" 

# Screen "Warmness"
super + alt + button{4,5,3}
 xrandr-gamma.sh {c,w,r}


###### Fusuma bindings ######
# 3-finger movement
super + {Left,Right}
 xdotool key alt+{Left,Right}
super + {Up,Down}
 bspc desktop {prev,next} -f
# 4-finger movement
super + alt + {Left,Right}
 bspc node -s {west,east}
super + alt + {Up,Down}
 bspc node -s {north,south}

###### Numpad media ######
# Volume
shift + {KP_Up,KP_Down}
 pactl set-sink-volume @DEFAULT_SINK@ {+10%,-10%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"
# Seek
shift + {KP_Home, KP_Prior} 
 mpc seek {-,+}00:00:5
#pgrep mpv >/dev/null && xdotool key --clearmodifiers --window $(xdotool search --class mpv) {Left,Right} ; \
# Play/pause
shift + KP_Begin
 mpc toggle
# xdotool key --clearmodifiers --window $(xdotool search --limit 1 --name "Youtube - Mozilla Firefox") k || \
# pgrep mpv >/dev/null && xdotool key --clearmodifiers --window $(xdotool search --class mpv) space
# Prev/Next song
shift + KP_{Left,Right}
 mpc {prev,next}

######## BSPWM-Specific binds #########
# Close WM
super + shift + Escape
 pkill lemonbar ; \
 bspc quit

# Activate screen-saver
super + BackSpace
 xdg-screensaver activate

# Suspend the system
super + alt + BackSpace
 systemctl suspend

# Suspend the system with lock
super + shift + BackSpace
 lock-glitch && systemctl suspend

# Close/Kill active window
super + {_,shift +}c
 bspc node -{c,k}

# Toggle Monocle mode
super + space
 bspc desktop -l next

super + shift + space
 bspc node -f next.urgent

# Select node in desktop
super + ctrl + {1-9}
 xdotool windowactivate $(xdotool search --desktop $(xdotool get_desktop) --name . | tac |  sed -n '{1-9}p' ) > /dev/null 2>&1

# Switch/move to workspace
super + {_,shift + }{1-9,0}
 bspc {desktop -f,node -d} focused:^{1-9,10}

# Switch to monitor
super + alt + {1-9}
 bspc monitor --focus ^{1-9}

# Focus the older or newer node in the focus history
super + {i,o}
	bspc wm -h off; \ 
  bspc config pointer_follows_focus true ;\ 
	bspc node {older,newer} -f ;\ 
  bspc config pointer_follows_focus false ;\ 
	bspc wm -h on

# Focus the older or newer desktop in the focus history
super + shift + {i,o}
 bspc wm -h off; \ 
 bspc config pointer_follows_focus true ;\ 
 bspc desktop {older,newer} -f; \
 bspc config pointer_follows_focus false ;\ 
 bspc wm -h on

# Switch to last node
super + grave
 bspc config pointer_follows_focus true ;\ 
 bspc node --focus last ;\ 
 bspc config pointer_follows_focus false

# Switch to last desktop
super + shift + grave
 bspc config pointer_follows_focus true ;\ 
 bspc desktop --focus last;\ 
 bspc config pointer_follows_focus false

# Switch to last monitor
super + alt + grave
 bspc monitor --focus last

# Move next/previous monitor
super + alt + {h,j,k,l}
 bspc monitor --focus {west,south,north,east}

# Focus the next/previous desktop in the current monitor
super + bracket{left,right}
 bspc desktop -f {prev,next}.local

# Same as above but with mouse xbuttons
super + button{9,8}
 bspc desktop -f {prev,next}.local

# Move the focused node to the next/previous desktop in the current monitor
super + shift + bracket{left,right}
 bspc node -d {prev,next}.local

# Focus the next/previous monitor
super + brace{left,right}
	bspc monitor -f {prev,next}

# Focus/move node in direction
#super + {_,shift + }{h,j,k,l}
# bspc node -{f,s} {west,south,north,east} \

# Focus node in direction
super + {h,j,k,l}
 bspc config pointer_follows_focus true ;\
 bspc node -f {west,south,north,east} ;\ 
 bspc config pointer_follows_focus false

# Maximize node side size
# Max bottom
super + x ; j
 source window-position.sh && xdotool windowsize $(xdotool getwindowfocus) $w $(($H-$y))
# Max right
super + x ; l
 source window-position.sh && xdotool windowsize $(xdotool getwindowfocus) $(($W-$x)) $h
# Max top
super + x ; k
 source window-position.sh && xdotool windowsize $(xdotool getwindowfocus) $w $(($h+$y)) ; \
 xdotool windowmove $(xdotool getwindowfocus) $x 0 
# Max left
super + x ; h
 source window-position.sh && xdotool windowmove $(xdotool getwindowfocus) 0 $y ; \
 xdotool windowsize $(xdotool getwindowfocus) $(($w+$x)) $h

# Move float to top left
super + x ; u
 source window-position.sh && xdotool windowmove $(xdotool getwindowfocus) 0 0 ; \
 xdotool windowsize $(xdotool getwindowfocus) 50% 50%
# Move float to top right
super + x ; i
 source window-position.sh && xdotool windowmove $(xdotool getwindowfocus) 50% 0% ; \
 xdotool windowsize $(xdotool getwindowfocus) 50% 50%
# Move float to bottom left
super + x ; n
 source window-position.sh && xdotool windowmove $(xdotool getwindowfocus) 0% 50% ; \
 xdotool windowsize $(xdotool getwindowfocus) 50% 50%
# Move float to bottom right
super + x ; m
 source window-position.sh && xdotool windowmove $(xdotool getwindowfocus) 50% 50% ; \
 xdotool windowsize $(xdotool getwindowfocus) 50% 50%

# Move node in direction
super + shift + h
 bspc node focused -v -50 0 >/dev/null || \
 bspc node focused -s west 
super + shift + j
 bspc node focused -v 0 50 >/dev/null || \
 bspc node focused -s south
super + shift + k
 bspc node focused -v 0 -50 >/dev/null || \
 bspc node focused -s north 
super + shift + l
 bspc node focused -v 50 0 >/dev/null || \
 bspc node focused -s east 

# Move node via touchpad
super + shift + button{6,7}
 bspc node focused -v {-15,15} 0 >/dev/null
super + shift + button{4,5}
 bspc node focused -v 0 {-15,15} >/dev/null

# Resize node via touchpad
super + ctrl + button{4,5,6,7}
 bspc node -z {top 0 -20,bottom 0 20,left -20 0,right 20 0}
super + ctrl + shift + button{4,5,6,7}
 bspc node -z {bottom 0 -20,top 0 20,right -20 0,left 20 0}

# Focus next/previous node
super + {_,shift} + Tab 
 bspc config pointer_follows_focus true ;\
 bspc node -f {next,prev}.window.local ;\ 
 bspc config pointer_follows_focus false

# Hide/unhide all nodes in a desktop
super + ctrl + v
 for nodes in $(bspc query -N -d); do bspc node -g hidden=on $nodes ; done
super + ctrl + shift + v
 for nodes in $(bspc query -N -n .hidden); do bspc node $nodes -g hidden=off ; done

# Hide focused node
super + v
 bspc node -g hidden

# Unhide a node
super + shift + v
 bspc node {,$(bspc query -N -n .hidden | tail -n1)} -g hidden=off

# Resize: Expand a window by moving one of its side outward
super + ctrl + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -60,right 60 0}

# Contract a window by moving one of its side inward
super + ctrl + shift + {h,j,k,l}
	bspc node -z {right -60 0,top 0 60,bottom 0 -60,left 60 0}

super + ctrl + {minus,equal}
 bspc node -z {right -50 0 ; bspc node -z left 50 0 ; bspc node -z bottom 0 -50 ; bspc node -z top 0 50, \
 bottom 0 50 ; bspc node -z top 0 -50 ; bspc node -z right 50 0 ; bspc node -z left -50 0}
 
# Win+G : Move active window to biggest space
super + {_, shift} + g
 bspc node -s {biggest,smallest}.local

# Set window to tiled
super + t
 bspc node -t tiled

# Set window to pseudo-tiled
super + shift + t
 bspc node -t pseudo_tiled

# Set window to floating
super + f
 bspc node -t floating ;\
 source center-node-on-cursor.sh

# Set window to fullscreen
super + shift + f
 bspc node -t fullscreen
# Toggle node close immunity
super + ctrl + x
	bspc node -g locked
	
# Node persists on all desktops
super + ctrl + y
	bspc node -g sticky

# Tries to keep the node in same tiling position/size.
super + ctrl + z
	bspc node -g private

# Set node layer
super + s ; {1,2,3}
 bspc node -l {below,normal,above}
 
# Create desktop
super + d ; c
 CREATEVAR=$(rofi -location 2 -yoffset 1 -bw 2 -dmenu -width 200 -p "Create") && bspc monitor -f --add-desktops "$CREATEVAR"

# Rename desktop
super + d ; r
 bspc desktop focused -n "$(rofi -location 2 -yoffset 1 -bw 2 -dmenu -width 200 -p "Rename")"
 # This variant appends number
 #RENAMEVAR="$(expr $(xdotool get_desktop) + 1 )$(rofi -location 2 -yoffset 1 -bw 2 -dmenu -width 200 -p "Rename")" && bspc desktop focused -n "$RENAMEVAR"

# Delete desktop
super + d ; d
 bspc desktop -f --remove

# Swap current desktop with the last one
super + d ; s ; s
 bspc desktop -s last
# Swap current desktop with index
#super + shift + s ; {1-9}
super + d ; s ; {1-9}
 bspc desktop -s ^{1-9}

# Resize gaps
super + KP_Add
 g="$(bspc config -d focused window_gap)" ; \
 bspc config -d focused window_gap $(( $g + 2 ))
 #g="$(bspc config -d focused window_gap)" ; \
 #bspc config -d focused window_gap $((${g} + 2 )) ; \
 #for p in bottom left right; do ; bspc config -d focused "{$p}""_padding" "$(( -$g / 2 ))" ; done

super + KP_Subtract
 g="$(bspc config -d focused window_gap)" ; \
 [ ${g} -gt 0 ] && \
 bspc config -d focused window_gap $(( $g - 2 ))
 #g="$(bspc config -d focused window_gap)" ; \
 #[ ${g} -gt 0 ] && \
 #bspc config -d focused window_gap $((${g} - 2 )) ; \
 #for p in bottom left right; do ; bspc config -d focused "{$p}""_padding" "$(( -( $g - 2 ) / 2 ))" ; done 

# Resize window borders
super + alt + KP_Add
 bspc config -d focused border_width $((`bspc config -d focused border_width` + 1 ))

super + alt + KP_Subtract
 if [ $(bspc config -d focused border_width) -gt 0 ] ; then ; bspc config -d focused border_width $((`bspc config -d focused border_width` - 1 )) ; fi

# Reset gaps to 0
#super + alt + ctrl + button3
#bspc config -d focused window_gap 0

# Change target window transparency
super + alt + ctrl button{4,5}
 picom-trans -c {+,-}5

# Make all nodes occupy same amount of area
super + equal
	bspc node @/ --balance

# Reset node sizes to original hierarchy
super + ctrl + button3
 bspc node @/ --equalize

# Cycle through wallpaper and theme
super + Home
  wal --iterative -i $WALLPAPER_DIR ; \
  killall -SIGUSR1 tint2 ; \
  pkill dunst ; dunst& ; \
  sleep 2 ; \
  source ~/.cache/wal/colors.sh ; \
  bspc config normal_border_color "$color1" ; \
  bspc config active_border_color "$color2" ; \
  bspc config focused_border_color "$color6" ; \
  bspc config presel_feedback_color "$color1" ; \
  betterlockscreen -u $wallpaper

# Ironically, this works implicitly and breaks otherwise
# Win + LeftClick : Move window
#super + button{1-2}
 #bspc pointer -g {move,resize_corner}

# Cycle between nodes
super + {_, shift} + n
 bspc node @/ -C {forward, backward}

# Flip node children orientation
super + shift + r
 bspc node @parent -R 90
super + ctrl + r
 bspc node @/ -R 90

# Set WM to floating
super + alt + f
 bspc rule -l | grep -q '\*:\* => state=floating' || bspc rule -a "*" state=floating

# Set WM to tiling
super + alt + t
 bspc rule -r ^$(bspc rule -l | grep -m 1 -n '\*:\* => state=floating' | cut -f1 -d:)

# Set WM to tiling
super alt t
 bspc rule -a "*" state=tiled

# Toggle node mark
super + shift + m
 bspc node -g marked

# Hop to next marked node
super + m
 bspc config pointer_follows_focus true ;\
 bspc node --focus next.marked ;\ 
 bspc config pointer_follows_focus false

# Insert receptacle, or clear receptacles on current desktop (blank space)
super + {_,shift} + b
    insert={true,false}; \
    $insert && bspc node -i || \
    for win in `bspc query -N -n .leaf.!window`; do bspc node $win -k ; done;
